    def replace_callback(match_obj: re.Match[str]) -> str:
        actual_matched_text_on_disk = match_obj.group(0) 
        
        key_after_diacritics = strip_diacritics(actual_matched_text_on_disk)
        processed_match_for_lookup = strip_control_characters(key_after_diacritics)
        
        for processed_config_key, original_config_value in _REPLACEMENT_MAPPING_CONFIG.items():
            if processed_config_key.lower() == processed_match_for_lookup.lower(): # Case-insensitive lookup
                return original_config_value # Returns the value AS IS from the map
        
        return actual_matched_text_on_disk
